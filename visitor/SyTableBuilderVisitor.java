package visitor;

/**
 * Created by davidhao on 9/18/16.
 */
//
// Generated by JTB 1.3.2
//

import symboltable.*;
import syntaxtree.*;
import utils.PrintError;

import java.util.Enumeration;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SyTableBuilderVisitor<WType> implements GJVisitor<WType,WType> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public WType visit(NodeList n, WType argu) {
        WType _ret=null;
        int _count=0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public WType visit(NodeListOptional n, WType argu) {
        if ( n.present() ) {
            WType _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public WType visit(NodeOptional n, WType argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public WType visit(NodeSequence n, WType argu) {
        WType _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public WType visit(NodeToken n, WType argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public WType visit(Goal n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    public WType visit(MainClass n, WType argu) {
        WType _ret=null;

        WClass mainClass = new WClass(n.f0.beginLine);
        ((WClasses)argu).insertClass(n.f1.f0.toString(),mainClass);
        WMethod mainMethod = new WMethod(n.f6.beginLine);
        mainClass.insertMethod("main",mainMethod);
        mainMethod.insertVar(n.f11.f0.toString(),new WIntType());

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    public WType visit(TypeDeclaration n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public WType visit(ClassDeclaration n, WType argu) {
        WType _ret=null;
        WClass newClass;
        String className;
        String errorString;


        n.f0.accept(this, argu);
        className = n.f1.f0.toString();

        newClass = new WClass(n.f1.f0.beginLine);
        boolean flag = ((WClasses)(argu)).insertClass(className,newClass);
        if (!flag){
            errorString = "class already declared : " + className;
            PrintError.print(newClass.getLine(),errorString);
        }
        n.f2.accept(this, argu);
        n.f3.accept(this, newClass);
        n.f4.accept(this, newClass);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public WType visit(ClassExtendsDeclaration n, WType argu) {
        WType _ret=null;
        WClass newClass;
        String className;
        String errorString;
        n.f0.accept(this, argu);

        className = n.f1.f0.toString();

        newClass = new WClass(n.f1.f0.beginLine);
        newClass.setParentName(n.f3.f0.toString());
        boolean flag = ((WClasses)argu).insertClass(className,newClass);
        if (!flag){
            errorString = "class has already declared : " + className;
            PrintError.print(newClass.getLine(),errorString);
        }
        n.f4.accept(this, argu);
        n.f5.accept(this, newClass);
        n.f6.accept(this, newClass);
        n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public WType visit(VarDeclaration n, WType argu) {
        WType _ret=null;
        WBasicType varType = (WBasicType) n.f0.accept(this,argu);
        boolean flag = true;

        if (argu instanceof WClass){
            flag = ((WClass)argu).insertField(n.f1.f0.toString(),varType);
        }
        if (argu instanceof WMethod){
            flag = ((WMethod)argu).insertVar(n.f1.f0.toString(),varType);
        }
        if (!flag){
           String errorString = "variable has already been declared : " + n.f1.f0.toString();
            PrintError.print(n.f1.f0.beginLine,errorString);
        }
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public WType visit(MethodDeclaration n, WType argu) {
        WType _ret=null;
        WMethod newMethod = new WMethod(n.f0.beginLine);
        boolean flag = ((WClass)argu).insertMethod(n.f2.f0.toString(),newMethod);
        if (!flag){
            String errorString = "method override : " + n.f2.f0.toString();
            PrintError.print(n.f2.f0.beginLine, errorString);
        }

        n.f0.accept(this, argu);
        WBasicType returnType = (WBasicType) n.f1.accept(this,argu);
        newMethod.setRet(returnType);
        n.f2.accept(this, argu);
        n.f3.accept(this, newMethod);
        n.f4.accept(this, newMethod);
        n.f5.accept(this, newMethod);
        n.f6.accept(this, newMethod);
        n.f7.accept(this, newMethod);
        n.f8.accept(this, newMethod);
        n.f9.accept(this, newMethod);
        n.f10.accept(this, newMethod);
        n.f11.accept(this, newMethod);
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public WType visit(FormalParameterList n, WType argu) {
        ParameterList paras = new ParameterList(n.f0.f1.f0.beginLine);
        ((WMethod)argu).setParas(paras);
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public WType visit(FormalParameter n, WType argu) {
        WType _ret=null;
        WBasicType paraType = (WBasicType) n.f0.accept(this,argu);
        boolean flag = ((WMethod)argu).insertVar(n.f1.f0.toString(),paraType);
        if (!flag){
            String errorString = "variable already declared : " + n.f1.f0.toString();
            PrintError.print(n.f1.f0.beginLine, errorString);
        }
        ((WMethod)argu).addParas(paraType);
        ((WMethod)argu).insertInit(n.f1.f0.toString());
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public WType visit(FormalParameterRest n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public WType visit(Type n, WType argu) {
        WBasicType type = (WBasicType)n.f0.accept(this,argu);
        if (n.f0.which ==3){
            type = new WClassType(((Identifier)n.f0.choice).f0.toString());
            /* if finding a classtype ,store*/
        }
        return type;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public WType visit(ArrayType n, WType argu) {
        WType type = (WType) new WArrayType();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "boolean"
     */
    public WType visit(BooleanType n, WType argu) {
        symboltable.WType type = new WBooleanType();
        n.f0.accept(this, argu);
        return (WType) type;
    }

    /**
     * f0 -> "int"
     */
    public WType visit(IntegerType n, WType argu) {
        symboltable.WType type = new WIntType();
        n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | PrintStatement()
     */
    public WType visit(Statement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public WType visit(Block n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public WType visit(AssignmentStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public WType visit(ArrayAssignmentStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     *       | IfthenStatement()
     */
    public WType visit(IfStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public WType visit(IfthenStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public WType visit(IfthenElseStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public WType visit(WhileStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public WType visit(PrintStatement n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     *       | AndExpression()
     *       | CompareExpression()
     *       | neqExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | DivExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public WType visit(Expression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public WType visit(AndExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "||"
     * f2 -> PrimaryExpression()
     */
    public WType visit(OrExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<="
     * f2 -> PrimaryExpression()
     */
    public WType visit(CompareExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "!="
     * f2 -> PrimaryExpression()
     */
    public WType visit(neqExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public WType visit(PlusExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public WType visit(MinusExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public WType visit(TimesExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "/"
     * f2 -> PrimaryExpression()
     */
    public WType visit(DivExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public WType visit(ArrayLookup n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public WType visit(ArrayLength n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public WType visit(MessageSend n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public WType visit(ExpressionList n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public WType visit(ExpressionRest n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     */
    public WType visit(PrimaryExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public WType visit(IntegerLiteral n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public WType visit(TrueLiteral n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public WType visit(FalseLiteral n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public WType visit(Identifier n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public WType visit(ThisExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public WType visit(ArrayAllocationExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public WType visit(AllocationExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public WType visit(NotExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public WType visit(BracketExpression n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( IdentifierRest() )*
     */
    public WType visit(IdentifierList n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public WType visit(IdentifierRest n, WType argu) {
        WType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

}

