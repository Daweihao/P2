package visitor;

import symboltable.*;
import syntaxtree.*;
import utils.PrintError;

import java.util.Enumeration;

/**
 * Created by davidhao on 9/19/16.
 */
public class ChTypeErrorVisitor extends GJDepthFirst<WType,WType>{
    //
// Generated by JTB 1.3.2
//


    /**
     * Provides default methods which visit each node in the tree in depth-first
     * order.  Your visitors may extend this class.
     */
        //
        // Auto class visitors--probably don't need to be overridden.
        //
        public WType visit(NodeList n, WType argu) {
            WType _ret=null;
            int _count=0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }

        public WType visit(NodeListOptional n, WType argu) {
            if ( n.present() ) {
                WType _ret=null;
                int _count=0;
                for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                    e.nextElement().accept(this,argu);
                    _count++;
                }
                return _ret;
            }
            else
                return null;
        }

        public WType visit(NodeOptional n, WType argu) {
            if ( n.present() )
                return n.node.accept(this,argu);
            else
                return null;
        }

        public WType visit(NodeSequence n, WType argu) {
            WType _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }

        public WType visit(NodeToken n, WType argu) { return null; }

        //
        // User-generated visitor methods below
        //

        /**
         * f0 -> MainClass()
         * f1 -> ( TypeDeclaration() )*
         * f2 -> <EOF>
         */
        public WType visit(Goal n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "class"
         * f1 -> Identifier()
         * f2 -> "{"
         * f3 -> "public"
         * f4 -> "static"
         * f5 -> "void"
         * f6 -> "main"
         * f7 -> "("
         * f8 -> "String"
         * f9 -> "["
         * f10 -> "]"
         * f11 -> Identifier()
         * f12 -> ")"
         * f13 -> "{"
         * f14 -> PrintStatement()
         * f15 -> "}"
         * f16 -> "}"
         */
        public WType visit(MainClass n, WType argu) {
            WType _ret=null;
            WClass mainClass = ((WClasses)argu).getWClass(n.f1.f0.toString());
            WMethod mainMethod = mainClass.getMethod("main");
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            n.f13.accept(this, argu);
            n.f14.accept(this, mainMethod);
            n.f15.accept(this, argu);
            n.f16.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> ClassDeclaration()
         *       | ClassExtendsDeclaration()
         */
        public WType visit(TypeDeclaration n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "class"
         * f1 -> Identifier()
         * f2 -> "{"
         * f3 -> ( VarDeclaration() )*
         * f4 -> ( MethodDeclaration() )*
         * f5 -> "}"
         */
        public WType visit(ClassDeclaration n, WType argu) {
            WType _ret=null;

            WClass obj = ((WClasses)argu).getWClass(n.f1.f0.toString());
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, obj);
            n.f4.accept(this, obj);
            n.f5.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "class"
         * f1 -> Identifier()
         * f2 -> "extends"
         * f3 -> Identifier()
         * f4 -> "{"
         * f5 -> ( VarDeclaration() )*
         * f6 -> ( MethodDeclaration() )*
         * f7 -> "}"
         */
        public WType visit(ClassExtendsDeclaration n, WType argu) {
            WType _ret=null;
            WClass obj = ((WClasses)argu).getWClass(n.f1.f0.toString());
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, obj);
            n.f6.accept(this, obj);
            n.f7.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Type()
         * f1 -> Identifier()
         * f2 -> ";"
         */
        public WType visit(VarDeclaration n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "public"
         * f1 -> Type()
         * f2 -> Identifier()
         * f3 -> "("
         * f4 -> ( FormalParameterList() )?
         * f5 -> ")"
         * f6 -> "{"
         * f7 -> ( VarDeclaration() )*
         * f8 -> ( Statement() )*
         * f9 -> "return"
         * f10 -> Expression()
         * f11 -> ";"
         * f12 -> "}"
         */
        public WType visit(MethodDeclaration n, WType argu) {
            WType _ret=null;
            WMethod method = ((WClass)argu).getMethod(n.f2.f0.toString());
            n.f0.accept(this, argu);
            n.f1.accept(this, method);
            n.f2.accept(this, method);
            n.f3.accept(this, method);
            n.f4.accept(this, method);
            n.f5.accept(this, method);
            n.f6.accept(this, method);
            n.f7.accept(this, method);
            n.f8.accept(this, method);
            n.f9.accept(this, method);
            WBasicType retType = (WBasicType)n.f10.accept(this,method);
            n.f11.accept(this, method);
            n.f12.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> FormalParameter()
         * f1 -> ( FormalParameterRest() )*
         */
        public WType visit(FormalParameterList n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Type()
         * f1 -> Identifier()
         */
        public WType visit(FormalParameter n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> ","
         * f1 -> FormalParameter()
         */
        public WType visit(FormalParameterRest n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> ArrayType()
         *       | BooleanType()
         *       | IntegerType()
         *       | Identifier()
         */
        public WType visit(Type n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "int"
         * f1 -> "["
         * f2 -> "]"
         */
        public WType visit(ArrayType n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "boolean"
         */
        public WType visit(BooleanType n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "int"
         */
        public WType visit(IntegerType n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Block()
         *       | AssignmentStatement()
         *       | ArrayAssignmentStatement()
         *       | IfStatement()
         *       | WhileStatement()
         *       | PrintStatement()
         */
        public WType visit(Statement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "{"
         * f1 -> ( Statement() )*
         * f2 -> "}"
         */
        public WType visit(Block n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Identifier()
         * f1 -> "="
         * f2 -> Expression()
         * f3 -> ";"
         */
        public WType visit(AssignmentStatement n, WType argu) {
            WType _ret=null;
            String varName = n.f0.f0.toString();
            WBasicType varType = ((WMethod)argu).getVar(varName);

            n.f0.accept(this, argu);
            n.f1.accept(this, argu);

            WBasicType exType = (WBasicType)n.f2.accept(this,argu);
            if (!((WMethod)argu).typeMatch(exType,varType)){
                String errorString = "assignment type not match : " + exType.getType()+"&"+varType.getType();
                PrintError.print(n.f0.f0.beginLine,errorString);
            }
            n.f3.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Identifier()
         * f1 -> "["
         * f2 -> Expression()
         * f3 -> "]"
         * f4 -> "="
         * f5 -> Expression()
         * f6 -> ";"
         */
        public WType visit(ArrayAssignmentStatement n, WType argu) {
            WType _ret=null;
            String arrayName = n.f0.f0.toString();
            WBasicType arrayType = ((WMethod)argu).getVar(arrayName);
            if (!(arrayType instanceof WArrayType)){
                String errorString = "not array type : "+ arrayName;
                PrintError.print(n.f0.f0.beginLine,errorString);
            }
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);

            WBasicType indexType =(WBasicType)n.f2.accept(this, argu);
            if (!(indexType instanceof WIntType)){
                String errorString = "index not Integer";
                PrintError.print(n.f0.f0.beginLine,errorString);
            }
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            WBasicType exType = (WBasicType)n.f5.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errorString = "array element is not Integer";
                PrintError.print(n.f0.f0.beginLine,errorString);
            }
            n.f6.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> IfthenElseStatement()
         *       | IfthenStatement()
         */
        public WType visit(IfStatement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "if"
         * f1 -> "("
         * f2 -> Expression()
         * f3 -> ")"
         * f4 -> Statement()
         */
        public WType visit(IfthenStatement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            WBasicType exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
                String errorString = "condition is not boolean";
                PrintError.print(n.f0.beginLine,errorString);
            }
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "if"
         * f1 -> "("
         * f2 -> Expression()
         * f3 -> ")"
         * f4 -> Statement()
         * f5 -> "else"
         * f6 -> Statement()
         */
        public WType visit(IfthenElseStatement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            WBasicType exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
                 String errorString = "condition is not boolean";
                PrintError.print(n.f0.beginLine,errorString);
            }
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "while"
         * f1 -> "("
         * f2 -> Expression()
         * f3 -> ")"
         * f4 -> Statement()
         */
        public WType visit(WhileStatement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            WBasicType exType = (WBasicType)n.f2.accept(this, argu);
            if (!(exType instanceof WBooleanType)) {
                String errorString = "condition is not boolean";
                PrintError.print(n.f0.beginLine, errorString);
            }
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "System.out.println"
         * f1 -> "("
         * f2 -> Expression()
         * f3 -> ")"
         * f4 -> ";"
         */
        public WType visit(PrintStatement n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            WBasicType exType = (WBasicType)n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errirString = "print is not integer";
                PrintError.print(n.f0.beginLine,errirString);
            }
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> OrExpression()
         *       | AndExpression()
         *       | CompareExpression()
         *       | neqExpression()
         *       | PlusExpression()
         *       | MinusExpression()
         *       | TimesExpression()
         *       | DivExpression()
         *       | ArrayLookup()
         *       | ArrayLength()
         *       | MessageSend()
         *       | PrimaryExpression()
         */
        public WType visit(Expression n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "&&"
         * f2 -> PrimaryExpression()
         */
        public WType visit(AndExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
                 String errorString = "condition is not boolean";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType)n.f2.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
             String errorString = "condition is not boolean";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "||"
         * f2 -> PrimaryExpression()
         */
        public WType visit(OrExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
                 String errorString = "condition is not boolean";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType)n.f2.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
             String errorString = "condition is not boolean";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "<="
         * f2 -> PrimaryExpression()
         */
        public WType visit(CompareExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                 String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
                WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "!="
         * f2 -> PrimaryExpression()
         */
        public WType visit(neqExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                 String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
                WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "+"
         * f2 -> PrimaryExpression()
         */
        public WType visit(PlusExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "-"
         * f2 -> PrimaryExpression()
         */
        public WType visit(MinusExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "*"
         * f2 -> PrimaryExpression()
         */
        public WType visit(TimesExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "/"
         * f2 -> PrimaryExpression()
         */
        public WType visit(DivExpression n, WType argu) {
            WBasicType exType = (WBasicType)n.f0.accept(this,argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            exType = (WBasicType) n.f2.accept(this, argu);
            if (!(exType instanceof WIntType)){
                String errorString = "compared element should be integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBooleanType _ret = new WBooleanType();
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "["
         * f2 -> PrimaryExpression()
         * f3 -> "]"
         */
        public WType visit(ArrayLookup n, WType argu) {
            WIntType _ret = new WIntType();
            WBasicType arrayType = (WBasicType) n.f0.accept(this, argu);
            if (!(arrayType instanceof WArrayType)){
                String errorString = "can not recognized array type";
                PrintError.print(n.f1.beginLine,errorString);
            }
            WBasicType indexType = (WBasicType) n.f2.accept(this,argu);
            n.f1.accept(this, argu);
            if (!(indexType instanceof WIntType)){
                System.out.println(indexType);
                String errorString = "index is not integer expression";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f3.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "."
         * f2 -> "length"
         */
        public WType visit(ArrayLength n, WType argu) {
            WIntType _ret=new WIntType();
            WBasicType arrayType = (WBasicType) n.f0.accept(this, argu);
            if (!(arrayType instanceof WArrayType)){
                String errorString = "not an array expression";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> PrimaryExpression()
         * f1 -> "."
         * f2 -> Identifier()
         * f3 -> "("
         * f4 -> ( ExpressionList() )?
         * f5 -> ")"
         */
        public WType visit(MessageSend n, WType argu) {
            WType _ret=null;

            WBasicType exType = (WBasicType) n.f0.accept(this, argu);
            String methodName = n.f2.f0.toString();
            if (!(exType instanceof WClassType)) {
                String errorString = "not a class! ";
                PrintError.print(n.f2.f0.beginLine, errorString);


                n.f1.accept(this, argu);
                n.f2.accept(this, argu);
                n.f3.accept(this, argu);
                n.f4.accept(this, argu);
                n.f5.accept(this, argu);
                return (new WBasicType("void"));
            }
            if (!((WMethod)argu).getWClass(exType.getType()).hasMethod(methodName)){
                 String errorString = "not a class! ";
                PrintError.print(n.f2.f0.beginLine, errorString);


                n.f1.accept(this, argu);
                n.f2.accept(this, argu);
                n.f3.accept(this, argu);
                n.f4.accept(this, argu);
                n.f5.accept(this, argu);
                return (new WBasicType("void"));
            }
            WMethod method = ((WMethod)argu).getWClass(exType.getType()).getMethod(methodName);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            ParameterList paras = (ParameterList)n.f4.accept(this,argu);
            if (!method.matchType(paras)){
                String errorString = "parameter list not matched";
                PrintError.print(n.f3.beginLine,errorString);
            }
            n.f5.accept(this,argu);
            _ret = method.getRet();
            return _ret;
        }

        /**
         * f0 -> Expression()
         * f1 -> ( ExpressionRest() )*
         */
        public WType visit(ExpressionList n, WType argu) {
            WBasicType headType = (WBasicType)n.f0.accept(this,argu);
            ParameterList restList = (ParameterList)n.f1.accept(this,argu);
            restList.addhead(headType);
            return restList;
        }

        /**
         * f0 -> ","
         * f1 -> Expression()
         */
        public WType visit(ExpressionRest n, WType argu) {
            n.f0.accept(this, argu);
            return n.f1.accept(this, argu);
        }

        /**
         * f0 -> IntegerLiteral()
         *       | TrueLiteral()
         *       | FalseLiteral()
         *       | Identifier()
         *       | ThisExpression()
         *       | ArrayAllocationExpression()
         *       | AllocationExpression()
         *       | NotExpression()
         *       | BracketExpression()
         */
        public WType visit(PrimaryExpression n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> <INTEGER_LITERAL>
         */
        public WType visit(IntegerLiteral n, WType argu) {
            WType _ret = new WIntType();
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "true"
         */
        public WType visit(TrueLiteral n, WType argu) {
            WType _ret=new WBooleanType();
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "false"
         */
        public WType visit(FalseLiteral n, WType argu) {
            WType _ret=new WBooleanType();
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> <IDENTIFIER>
         */
        public WType visit(Identifier n, WType argu) {
            WType _ret=null;
            String varname = n.f0.toString();
            if ((argu instanceof WMethod)&&((WMethod)argu).hasVar(varname)){
                _ret = ((WMethod)argu).getVar(varname);
            }
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "this"
         */
        public WType visit(ThisExpression n, WType argu) {
            WType _ret=new WClassType(((WMethod)argu).getName());
            n.f0.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "new"
         * f1 -> "int"
         * f2 -> "["
         * f3 -> Expression()
         * f4 -> "]"
         */
        public WType visit(ArrayAllocationExpression n, WType argu) {
            WType _ret=new WArrayType();
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            WBasicType indexType = (WBasicType) n.f3.accept(this, argu);
            if (!(indexType instanceof WIntType)){
                String errorString = "size is not integer";
                PrintError.print(n.f1.beginLine,errorString);
            }
            n.f4.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "new"
         * f1 -> Identifier()
         * f2 -> "("
         * f3 -> ")"
         */
        public WType visit(AllocationExpression n, WType argu) {
            WClassType _ret=new WClassType(n.f1.f0.toString());
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> "!"
         * f1 -> Expression()
         */
        public WType visit(NotExpression n, WType argu) {
            WBooleanType _ret=new WBooleanType();

            n.f0.accept(this, argu);
            WBasicType exType = (WBasicType) n.f1.accept(this, argu);
            if (!(exType instanceof WBooleanType)){
                String errorString = "condition is not boolean";
                PrintError.print(n.f0.beginLine,errorString);
            }
            return _ret;
        }

        /**
         * f0 -> "("
         * f1 -> Expression()
         * f2 -> ")"
         */
        public WType visit(BracketExpression n, WType argu) {
            n.f0.accept(this, argu);
            WType _ret =  n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> Identifier()
         * f1 -> ( IdentifierRest() )*
         */
        public WType visit(IdentifierList n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            return _ret;
        }

        /**
         * f0 -> ","
         * f1 -> Identifier()
         */
        public WType visit(IdentifierRest n, WType argu) {
            WType _ret=null;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            return _ret;
        }

    }


